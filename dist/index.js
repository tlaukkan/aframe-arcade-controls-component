!function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}();function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}if("undefined"==typeof AFRAME)throw new Error("AFRAME not available.");if("undefined"==typeof THREE)throw new Error("THREE not available.");var s=function(){function e(t,i){n(this,e),this.el=t,this.data=i,this.movementSpeed=this.data.movementSpeed,this.height=this.data.height,this.width=this.data.width,this.jumpStartSpeed=this.data.jumpStartSpeed,this.forwardKey=this.data.forwardKey,this.backwardKey=this.data.backwardKey,this.leftKey=this.data.leftKey,this.rightKey=this.data.rightKey,this.jumpKey=this.data.jumpKey,this.collediableCrawler=new o(t.sceneEl.object3D),this.raycaster=new THREE.Raycaster,this.yAxisPositive=new THREE.Vector3(0,1,0),this.yAxisNegative=new THREE.Vector3(0,-1,0),this.xzPlane=new THREE.Plane(this.yAxisPositive),this.jumping=!1,this.airborne=!1,this.time=0,this.yVelocity=0,this.pressed=new Map,this.cameraDirection=new THREE.Vector3(0,0,0),this.xzDirection=new THREE.Vector3(0,0,0),this.xzDeltaDirection=new THREE.Vector3(0,0,0),this.xzDeltaOppositeDirection=new THREE.Vector3(0,0,0)}return r(e,[{key:"onKeyDown",value:function(e){this.pressed.set(e,this.time)}},{key:"onKeyUp",value:function(e){this.pressed.has(e)&&this.pressed.delete(e)}},{key:"onTick",value:function(e,t){this.collediableCrawler.crawl(),this.time=e;var i=this.collediableCrawler.collideables();this.updateY(t,i),this.updateXZ(t,i)}},{key:"updateXZ",value:function(e,t){var i=this.el.object3D.position,r=this.pressed.has(this.forwardKey),n=this.pressed.has(this.backwardKey),s=this.pressed.has(this.leftKey),o=this.pressed.has(this.rightKey);if(r||n||s||o){var a=this.movementSpeed*e/1e3;this.computeXZDirectionFromCamera(),this.xzDeltaDirection.copy(this.xzDirection),this.xzDeltaOppositeDirection.copy(this.xzDirection),this.xzDeltaOppositeDirection.multiplyScalar(-1),r&&(this.testCollision(this.xzDeltaDirection,t)||(i.x+=this.xzDeltaDirection.x*a,i.z+=this.xzDeltaDirection.z*a)),n&&(this.testCollision(this.xzDeltaOppositeDirection,t)||(i.x+=this.xzDeltaOppositeDirection.x*a,i.z+=this.xzDeltaOppositeDirection.z*a)),(s||o)&&(this.xzDeltaDirection.cross(this.yAxisPositive),this.xzDeltaOppositeDirection.cross(this.yAxisPositive),o&&(this.testCollision(this.xzDeltaDirection,t)||(i.x+=this.xzDeltaDirection.x*a,i.z+=this.xzDeltaDirection.z*a)),s&&(this.testCollision(this.xzDeltaOppositeDirection,t)||(i.x+=this.xzDeltaOppositeDirection.x*a,i.z+=this.xzDeltaOppositeDirection.z*a)))}}},{key:"updateY",value:function(e,t){var i=this.el.object3D.position,r=this.findDistanceToNearest(this.yAxisNegative,t);!this.pressed.has(this.jumpKey)||this.jumping||this.airborne||(this.jumping=!0,this.yVelocity=this.jumpStartSpeed);var n=this.yVelocity*e/1e3,s=void 0;if(r&&!this.jumping){var o=r-this.height/2;Math.abs(n)>Math.abs(o)||Math.abs(o)<.05?(s=-o,this.airborne=!1):(s=n,this.airborne=!0)}else s=n,this.airborne=!0;this.airborne?this.yVelocity-=9.81*e/1e3:this.yVelocity=0,this.yVelocity<0&&(this.jumping=!1),i.y+=s}},{key:"computeXZDirectionFromCamera",value:function(){document.querySelector("[camera]").object3D.getWorldDirection(this.cameraDirection),this.cameraDirection.multiplyScalar(-1),this.xzPlane.projectPoint(this.cameraDirection,this.xzDirection),this.xzDirection.normalize()}},{key:"findDistanceToNearest",value:function(e,t){this.raycaster.near=0,this.raycaster.far=this.height,this.raycaster.set(this.el.object3D.position,e);var i=this.raycaster.intersectObjects(t);return i.length>0?i[0].distance:null}},{key:"testCollision",value:function(e,t){var i=this.findDistanceToNearest(e,t);return i&&i<this.width/2}}]),e}(),o=function(){function e(t){n(this,e),this.root=t,this.queuedChildren=[],this.queuedChildren.push(this.root.children),this.queuedChildrenIndex=0,this.children=[],this.childrenIndex=0,this.collidablesFinal=[],this.collideablesTemporary=[],this.initialCrawlDone=!1}return r(e,[{key:"start",value:function(){this.crawl()}},{key:"collideables",value:function(){return this.collidablesFinal}},{key:"fullCrawl",value:function(){for(;!this.crawl(););}},{key:"crawl",value:function(){if(!this.initialCrawlDone)return this.initialCrawlDone=!0,void this.fullCrawl();if(this.children.length>this.childrenIndex){var e=this.children[this.childrenIndex];this.childrenIndex++,this.queuedChildren.push(e.children),"Mesh"===e.type&&this.collideablesTemporary.push(e)}else{if(!(this.queuedChildren.length>this.queuedChildrenIndex))return this.queuedChildren=[],this.queuedChildren.push(this.root.children),this.queuedChildrenIndex=0,this.collidablesFinal=this.collideablesTemporary,this.collideablesTemporary=[],!0;this.children=this.queuedChildren[this.queuedChildrenIndex],this.childrenIndex=0,this.queuedChildrenIndex++}return!1}}]),e}();AFRAME.registerComponent("arcade-controls",{schema:{movementSpeed:{type:"number",default:2},height:{type:"number",default:2},width:{type:"number",default:.5},jumpStartSpeed:{type:"number",default:5},forwardKey:{type:"string",default:"w"},backwardKey:{type:"string",default:"s"},leftKey:{type:"string",default:"a"},rightKey:{type:"string",default:"d"},jumpKey:{type:"string",default:" "}},init:function(){var e=this;this.data;this.controller=new s(this.el,this.data),window.addEventListener("keydown",function(t){e.controller.onKeyDown(t.key)}),window.addEventListener("keyup",function(t){e.controller.onKeyUp(t.key)})},update:function(e){console.log("arcade controls update")},tick:function(e,t){this.time=e,this.controller.onTick(e,t)}})}]);